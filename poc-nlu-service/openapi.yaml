openapi: 3.0.3
info:
  title: POC NLU Service API
  description: |
    Natural Language Understanding Microservice for POC Banking Chat System
    
    This service provides intent detection, entity extraction, and natural language 
    understanding capabilities using DialogFlow integration. It serves as the primary 
    interface for analyzing user input from the chat interface.
    
    ## Key Features
    - DialogFlow Integration for intent detection
    - Banking domain-specific NLU
    - Context management for conversational flows
    - Entity extraction
    - Multi-language support
    
  version: 1.0.0
  contact:
    name: POC Development Team
    email: dev@poc-banking.com
  license:
    name: MIT

servers:
  - url: http://localhost:3003
    description: Local development server
  - url: http://poc-nlu-service:3003
    description: Docker container

tags:
  - name: Chat Integration
    description: Primary endpoints for chat application integration
  - name: Intent Detection
    description: Intent detection operations
  - name: Entity Extraction
    description: Entity extraction operations
  - name: Banking NLU
    description: Banking-specific natural language understanding
  - name: DialogFlow
    description: DialogFlow integration endpoints
  - name: Context Management
    description: Session context operations
  - name: Training
    description: Model training operations
  - name: Service Info
    description: Service health and capabilities

paths:
  /api/nlu/analyze:
    post:
      tags:
        - Chat Integration
      summary: Analyze user input (Primary Chat Endpoint)
      description: |
        **Primary endpoint for chat applications to analyze user input.**
        
        This unified endpoint combines DialogFlow intent detection with banking-specific 
        analysis to provide comprehensive understanding of user messages. It's the 
        recommended endpoint for chat backend integration.
        
        Features:
        - DialogFlow intent detection
        - Banking-specific intent analysis
        - Entity extraction
        - Confidence scoring
        - Context-aware processing
        
      operationId: analyzeUserInput
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalyzeRequest'
            examples:
              checkBalance:
                summary: Check account balance
                value:
                  user_input: "What is my account balance?"
                  sessionId: "user-session-123"
                  userId: "user-456"
                  languageCode: "en-US"
              transferFunds:
                summary: Transfer funds
                value:
                  user_input: "I want to transfer $500 to John's account"
                  sessionId: "user-session-123"
                  userId: "user-456"
      responses:
        '200':
          description: Successful analysis
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyzeResponse'
              examples:
                checkBalanceResponse:
                  summary: Balance check intent detected
                  value:
                    success: true
                    data:
                      intent: "check.balance"
                      confidence: 0.92
                      dialogflow:
                        fulfillmentText: "I can help you check your account balance."
                        parameters:
                          account_type: "checking"
                        languageCode: "en-US"
                        allRequiredParamsPresent: true
                      banking:
                        intent: "check_balance"
                        confidence: 0.88
                        entities:
                          - entity: "account_type"
                            value: "checking"
                            type: "account"
                      entities:
                        - entity: "account_type"
                          value: "checking"
                          source: "dialogflow"
                      metadata:
                        source: "dialogflow"
                        sessionId: "user-session-123"
                        userId: "user-456"
                        timestamp: "2025-10-13T12:00:00.000Z"
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/nlu/intents:
    post:
      tags:
        - Intent Detection
      summary: Detect intent from message
      description: Detect intent from user message using NLU engine
      operationId: detectIntent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntentRequest'
      responses:
        '200':
          description: Intent detected successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntentResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/nlu/intents/available:
    get:
      tags:
        - Intent Detection
      summary: Get available intents
      description: Get list of all available intents the NLU service can detect
      operationId: getAvailableIntents
      responses:
        '200':
          description: List of available intents
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        intent:
                          type: string
                        description:
                          type: string
                        category:
                          type: string
                        examples:
                          type: array
                          items:
                            type: string

  /api/nlu/banking:
    post:
      tags:
        - Banking NLU
      summary: Detect banking-specific intent
      description: Detect intents specific to banking operations
      operationId: detectBankingIntent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - message
              properties:
                message:
                  type: string
                  minLength: 1
                  maxLength: 1000
                  description: User message to analyze
      responses:
        '200':
          description: Banking intent detected
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankingIntentResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/nlu/banking/intents:
    get:
      tags:
        - Banking NLU
      summary: Get banking intents
      description: Get list of banking-specific intents
      operationId: getBankingIntents
      responses:
        '200':
          description: List of banking intents
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      type: string

  /api/nlu/banking/entities:
    get:
      tags:
        - Banking NLU
      summary: Get banking entity types
      description: Get list of banking-specific entity types that can be extracted
      operationId: getBankingEntities
      responses:
        '200':
          description: List of banking entity types
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        entity:
                          type: string
                        type:
                          type: string
                        examples:
                          type: array
                          items:
                            type: string

  /api/nlu/entities:
    post:
      tags:
        - Entity Extraction
      summary: Extract entities from message
      description: Extract named entities from user message
      operationId: extractEntities
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - message
              properties:
                message:
                  type: string
                  minLength: 1
                  maxLength: 1000
                  description: Message to extract entities from
                domain:
                  type: string
                  enum: [general, banking]
                  default: general
                  description: Domain for entity extraction
      responses:
        '200':
          description: Entities extracted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Entity'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/nlu/dialogflow:
    post:
      tags:
        - DialogFlow
      summary: Use DialogFlow for intent detection
      description: Direct integration with Google DialogFlow API
      operationId: useDialogFlow
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - message
              properties:
                message:
                  type: string
                  minLength: 1
                  maxLength: 1000
                sessionId:
                  type: string
                  default: default-session
      responses:
        '200':
          description: DialogFlow response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DialogFlowResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/nlu/dialogflow/status:
    get:
      tags:
        - DialogFlow
      summary: Get DialogFlow integration status
      description: Check if DialogFlow is properly configured and available
      operationId: getDialogFlowStatus
      responses:
        '200':
          description: DialogFlow status
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      configured:
                        type: boolean
                      available:
                        type: boolean
                      projectId:
                        type: string
                      fallbackMode:
                        type: boolean

  /api/nlu/context/{sessionId}:
    get:
      tags:
        - Context Management
      summary: Get session context
      description: Retrieve conversation context for a session
      operationId: getContext
      parameters:
        - $ref: '#/components/parameters/SessionId'
      responses:
        '200':
          description: Session context
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    additionalProperties: true
        '404':
          description: Session not found
        '500':
          $ref: '#/components/responses/InternalError'
    
    post:
      tags:
        - Context Management
      summary: Update session context
      description: Update or create conversation context for a session
      operationId: updateContext
      parameters:
        - $ref: '#/components/parameters/SessionId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - context
              properties:
                context:
                  type: object
                  additionalProperties: true
                  description: Context data to store
      responses:
        '200':
          description: Context updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'
    
    delete:
      tags:
        - Context Management
      summary: Clear session context
      description: Delete all context data for a session
      operationId: clearContext
      parameters:
        - $ref: '#/components/parameters/SessionId'
      responses:
        '200':
          description: Context cleared successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '500':
          $ref: '#/components/responses/InternalError'

  /api/nlu/train:
    post:
      tags:
        - Training
      summary: Train NLU model
      description: Train the NLU model with new training data
      operationId: trainModel
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - trainingData
              properties:
                trainingData:
                  type: array
                  items:
                    type: object
                    required:
                      - message
                      - intent
                    properties:
                      message:
                        type: string
                      intent:
                        type: string
                      entities:
                        type: array
                        items:
                          $ref: '#/components/schemas/Entity'
      responses:
        '200':
          description: Training started successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  trainingId:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/nlu/health:
    get:
      tags:
        - Service Info
      summary: Service health check
      description: Check if the NLU service is healthy and operational
      operationId: getHealth
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  service:
                    type: string
                  status:
                    type: string
                    enum: [healthy, degraded, unhealthy]
                  timestamp:
                    type: string
                    format: date-time
                  uptime:
                    type: number
                  version:
                    type: string

  /api/nlu/capabilities:
    get:
      tags:
        - Service Info
      summary: Get service capabilities
      description: Get detailed information about service capabilities and features
      operationId: getCapabilities
      responses:
        '200':
          description: Service capabilities
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: object
                    properties:
                      features:
                        type: array
                        items:
                          type: string
                      supportedLanguages:
                        type: array
                        items:
                          type: string
                      maxMessageLength:
                        type: integer
                      intentsCount:
                        type: integer
                      entitiesCount:
                        type: integer

  /health:
    get:
      tags:
        - Service Info
      summary: Root health check
      description: Basic health check endpoint
      operationId: getRootHealth
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  service:
                    type: string
                  status:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
                  uptime:
                    type: number
                  version:
                    type: string

components:
  schemas:
    AnalyzeRequest:
      type: object
      required:
        - user_input
      properties:
        user_input:
          type: string
          minLength: 1
          maxLength: 1000
          description: User message to analyze
          example: "What is my account balance?"
        sessionId:
          type: string
          description: Unique session identifier for context tracking
          example: "user-session-123"
        userId:
          type: string
          description: User identifier
          example: "user-456"
        languageCode:
          type: string
          default: "en-US"
          description: Language code for processing
          example: "en-US"

    AnalyzeResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            intent:
              type: string
              description: Detected intent
              example: "check.balance"
            confidence:
              type: number
              format: float
              minimum: 0
              maximum: 1
              description: Confidence score (0-1)
              example: 0.92
            dialogflow:
              type: object
              properties:
                fulfillmentText:
                  type: string
                  example: "I can help you check your account balance."
                parameters:
                  type: object
                  additionalProperties: true
                languageCode:
                  type: string
                  example: "en-US"
                allRequiredParamsPresent:
                  type: boolean
                  example: true
            banking:
              type: object
              properties:
                intent:
                  type: string
                  example: "check_balance"
                confidence:
                  type: number
                  format: float
                  example: 0.88
                entities:
                  type: array
                  items:
                    $ref: '#/components/schemas/Entity'
            entities:
              type: array
              items:
                allOf:
                  - $ref: '#/components/schemas/Entity'
                  - type: object
                    properties:
                      source:
                        type: string
                        enum: [dialogflow, banking]
            metadata:
              type: object
              properties:
                source:
                  type: string
                  example: "dialogflow"
                sessionId:
                  type: string
                  example: "user-session-123"
                userId:
                  type: string
                  example: "user-456"
                timestamp:
                  type: string
                  format: date-time
                  example: "2025-10-13T12:00:00.000Z"

    IntentRequest:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          minLength: 1
          maxLength: 1000
          description: User message
        userId:
          type: string
          description: User identifier
        sessionId:
          type: string
          description: Session identifier

    IntentResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            intent:
              type: string
            confidence:
              type: number
              format: float
              minimum: 0
              maximum: 1
            entities:
              type: array
              items:
                $ref: '#/components/schemas/Entity'

    BankingIntentResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            intent:
              type: string
              example: "check_balance"
            confidence:
              type: number
              format: float
              example: 0.88
            category:
              type: string
              example: "account_inquiry"
            entities:
              type: array
              items:
                $ref: '#/components/schemas/Entity'

    DialogFlowResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            intent:
              type: string
            confidence:
              type: number
              format: float
            fulfillmentText:
              type: string
            parameters:
              type: object
              additionalProperties: true
            languageCode:
              type: string
            allRequiredParamsPresent:
              type: boolean

    Entity:
      type: object
      properties:
        entity:
          type: string
          description: Entity type
          example: "account_type"
        value:
          type: string
          description: Extracted value
          example: "checking"
        type:
          type: string
          description: Entity classification
          example: "account"
        confidence:
          type: number
          format: float
          minimum: 0
          maximum: 1
          description: Extraction confidence
        startIndex:
          type: integer
          description: Start position in text
        endIndex:
          type: integer
          description: End position in text

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          description: Error message
        message:
          type: string
          description: Detailed error description
        code:
          type: string
          description: Error code

  parameters:
    SessionId:
      name: sessionId
      in: path
      required: true
      description: Unique session identifier
      schema:
        type: string
      example: "user-session-123"

  responses:
    BadRequest:
      description: Bad request - invalid input
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error: "Validation error"
            message: "user_input must be between 1 and 1000 characters"

    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            error: "Internal server error"
            message: "An unexpected error occurred"

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for service authentication (optional for local dev)

security: []

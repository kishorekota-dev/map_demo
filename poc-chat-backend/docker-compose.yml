version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: poc-chat-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-poc_banking}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=en_US.UTF-8"
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-poc_banking}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - poc-backend-network

  # Redis Cache (Optional - for session storage)
  redis:
    image: redis:7-alpine
    container_name: poc-chat-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - poc-backend-network

  # Chat Backend Service
  chat-backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: poc-chat-backend
    restart: unless-stopped
    environment:
      # Server Configuration
      PORT: ${PORT:-3006}
      NODE_ENV: ${NODE_ENV:-production}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      HOST: 0.0.0.0
      
      # Security
      JWT_SECRET: ${JWT_SECRET:-dev-jwt-secret-change-me-in-production-2024}
      JWT_EXPIRY: ${JWT_EXPIRY:-24h}
      
      # CORS
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:3001}
      
      # Microservices
      API_GATEWAY_URL: ${API_GATEWAY_URL:-http://api-gateway:3001}
      BANKING_SERVICE_URL: ${BANKING_SERVICE_URL:-http://banking-service:3005}
      NLP_SERVICE_URL: ${NLP_SERVICE_URL:-http://nlp-service:3002}
      NLU_SERVICE_URL: ${NLU_SERVICE_URL:-http://nlu-service:3003}
      MCP_SERVICE_URL: ${MCP_SERVICE_URL:-http://mcp-service:3004}
      
      # WebSocket Configuration
      WS_HEARTBEAT_INTERVAL: ${WS_HEARTBEAT_INTERVAL:-30000}
      WS_MAX_CONNECTIONS: ${WS_MAX_CONNECTIONS:-1000}
      WS_TIMEOUT: ${WS_TIMEOUT:-60000}
      WS_PING_INTERVAL: ${WS_PING_INTERVAL:-25000}
      WS_PING_TIMEOUT: ${WS_PING_TIMEOUT:-5000}
      
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-poc_banking}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_POOL_MAX: ${DB_POOL_MAX:-20}
      DB_POOL_MIN: ${DB_POOL_MIN:-5}
      DB_IDLE_TIMEOUT: ${DB_IDLE_TIMEOUT:-30000}
      DB_CONNECTION_TIMEOUT: ${DB_CONNECTION_TIMEOUT:-10000}
      DB_SSL: ${DB_SSL:-false}
      DB_LOGGING: ${DB_LOGGING:-false}
      
      # Redis Configuration
      REDIS_URL: redis://redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
      REDIS_SESSION_TTL: ${REDIS_SESSION_TTL:-3600}
      REDIS_MESSAGE_TTL: ${REDIS_MESSAGE_TTL:-86400}
      
      # Chat Configuration
      MAX_MESSAGE_LENGTH: ${MAX_MESSAGE_LENGTH:-2000}
      MAX_CONVERSATION_HISTORY: ${MAX_CONVERSATION_HISTORY:-100}
      MESSAGE_RATE_LIMIT: ${MESSAGE_RATE_LIMIT:-60}
      CONVERSATION_TIMEOUT: ${CONVERSATION_TIMEOUT:-1800000}
      AUTO_SAVE_INTERVAL: ${AUTO_SAVE_INTERVAL:-30000}
      
      # Agent Configuration
      MAX_CONCURRENT_AGENTS: ${MAX_CONCURRENT_AGENTS:-20}
      AGENT_RESPONSE_TIMEOUT: ${AGENT_RESPONSE_TIMEOUT:-30000}
      AGENT_RETRY_ATTEMPTS: ${AGENT_RETRY_ATTEMPTS:-3}
      AGENT_FALLBACK_ENABLED: ${AGENT_FALLBACK_ENABLED:-true}
      DEFAULT_AGENT: ${DEFAULT_AGENT:-banking-assistant}
      
      # Session Management
      SESSION_TTL: ${SESSION_TTL:-3600000}
      SESSION_CLEANUP_INTERVAL: ${SESSION_CLEANUP_INTERVAL:-300000}
      MAX_SESSIONS_PER_USER: ${MAX_SESSIONS_PER_USER:-5}
      SESSION_STORAGE_TYPE: ${SESSION_STORAGE_TYPE:-redis}
      
      # Rate Limiting
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-300}
      MESSAGE_RATE_LIMIT_WINDOW: ${MESSAGE_RATE_LIMIT_WINDOW:-60000}
      MESSAGE_RATE_LIMIT_MAX: ${MESSAGE_RATE_LIMIT_MAX:-60}
      
      # Logging
      LOG_FILE_PATH: /app/logs/chat-backend.log
      LOG_MAX_FILES: ${LOG_MAX_FILES:-10}
      LOG_MAX_SIZE: ${LOG_MAX_SIZE:-20MB}
      
      # Health Check
      HEALTH_CHECK_INTERVAL: ${HEALTH_CHECK_INTERVAL:-30000}
      SERVICE_TIMEOUT: ${SERVICE_TIMEOUT:-5000}
      
      # Service Info
      SERVICE_NAME: poc-chat-backend
      SERVICE_VERSION: ${SERVICE_VERSION:-1.0.0}
    
    ports:
      - "${PORT:-3006}:3006"
    
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3006/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    networks:
      - poc-backend-network
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  poc-backend-network:
    driver: bridge
    name: poc-backend-network

volumes:
  postgres-data:
    name: poc-chat-postgres-data
  redis-data:
    name: poc-chat-redis-data
